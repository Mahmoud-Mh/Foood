{
	"info": {
		"_postman_id": "ingredients-perfect-100-2025",
		"name": "Ingredients - PERFECT 100%",
		"description": "Collection Ingredients avec 100% de réussite garantie",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"version": "2.0.0"
	},
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:3000/api/v1"
		}
	],
	"auth": {
		"type": "bearer",
		"bearer": [
			{
				"key": "token",
				"value": "{{admin_token}}",
				"type": "string"
			}
		]
	},
	"item": [
		{
			"name": "Step 1 - Setup Admin",
			"item": [
				{
					"name": "Register & Login Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== INGREDIENTS PERFECT TEST - SETUP ADMIN ===');",
									"",
									"pm.test('Registration successful', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Registration response:', JSON.stringify(response, null, 2));",
									"",
									"// Extract token from correct path: response.data.tokens.accessToken",
									"if (response.data && response.data.tokens && response.data.tokens.accessToken) {",
									"    const token = response.data.tokens.accessToken;",
									"    pm.globals.set('admin_token', token);",
									"    pm.collectionVariables.set('admin_token', token);",
									"    pm.environment.set('admin_token', token);",
									"    console.log('✅ Token extracted and stored:', token.substring(0, 30) + '...');",
									"} else {",
									"    console.log('❌ Token not found in response.data.tokens.accessToken');",
									"    console.log('❌ Response structure:', Object.keys(response));",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"firstName\": \"Ingredients\",\n  \"lastName\": \"Admin\",\n  \"email\": \"ingredients.admin@recipeapp.com\",\n  \"password\": \"IngredientsAdmin123!\",\n  \"confirmPassword\": \"IngredientsAdmin123!\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/auth/register",
							"host": ["{{base_url}}"],
							"path": ["auth", "register"]
						}
					}
				},
				{
					"name": "Promote to Admin Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test('User promoted to admin', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"console.log('✅ User promoted to admin role');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.globals.get('admin_token') || pm.collectionVariables.get('admin_token');",
									"console.log('Token for promotion:', token ? token.substring(0, 30) + '...' : 'NOT FOUND');",
									"if (token) {",
									"    pm.request.headers.add({key: 'Authorization', value: 'Bearer ' + token});",
									"} else {",
									"    console.log('❌ NO TOKEN AVAILABLE FOR PROMOTION');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/users/promote-to-admin/ingredients.admin@recipeapp.com",
							"host": ["{{base_url}}"],
							"path": ["users", "promote-to-admin", "ingredients.admin@recipeapp.com"]
						}
					}
				}
			]
		},
		{
			"name": "Step 2 - Test Ingredients CRUD",
			"item": [
				{
					"name": "Create Test Ingredient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.globals.get('admin_token') || pm.collectionVariables.get('admin_token');",
									"console.log('Token for ingredient creation:', token ? token.substring(0, 30) + '...' : 'NOT FOUND');",
									"if (token) {",
									"    pm.request.headers.add({key: 'Authorization', value: 'Bearer ' + token});",
									"} else {",
									"    console.log('❌ NO TOKEN AVAILABLE FOR INGREDIENT CREATION');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== CREATE INGREDIENT ===');",
									"",
									"pm.test('Ingredient created successfully', function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Create ingredient response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Response has correct structure', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('id');",
									"    pm.expect(response.data).to.have.property('name');",
									"    pm.expect(response.data).to.have.property('category');",
									"});",
									"",
									"if (response.success && response.data && response.data.id) {",
									"    pm.globals.set('ingredient_id', response.data.id);",
									"    pm.collectionVariables.set('ingredient_id', response.data.id);",
									"    console.log('✅ Ingredient ID stored:', response.data.id);",
									"} else {",
									"    console.log('❌ Failed to extract ingredient data from response');",
									"}"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"name\": \"Tomato\",\n  \"description\": \"Fresh red tomato for testing\",\n  \"category\": \"vegetable\",\n  \"caloriesPerUnit\": 18,\n  \"defaultUnit\": \"grams\",\n  \"allergenInfo\": \"None\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/ingredients",
							"host": ["{{base_url}}"],
							"path": ["ingredients"]
						}
					}
				},
				{
					"name": "Get Ingredient by ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== GET INGREDIENT BY ID ===');",
									"",
									"pm.test('Ingredient retrieved successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Get ingredient response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Ingredient data matches creation', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data.name).to.equal('Tomato');",
									"    pm.expect(response.data.category).to.equal('vegetable');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/{{ingredient_id}}",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "{{ingredient_id}}"]
						}
					}
				},
				{
					"name": "Update Ingredient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.globals.get('admin_token') || pm.collectionVariables.get('admin_token');",
									"if (token) {",
									"    pm.request.headers.add({key: 'Authorization', value: 'Bearer ' + token});",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== UPDATE INGREDIENT ===');",
									"",
									"pm.test('Ingredient updated successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Update ingredient response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Updated data is correct', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data.description).to.include('UPDATED');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n  \"description\": \"UPDATED - Fresh red tomato for testing with enhanced nutrition\"\n}"
						},
						"url": {
							"raw": "{{base_url}}/ingredients/{{ingredient_id}}",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "{{ingredient_id}}"]
						}
					}
				}
			]
		},
		{
			"name": "Step 3 - Test Ingredients Features",
			"item": [
				{
					"name": "Get All Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== GET ALL INGREDIENTS ===');",
									"",
									"pm.test('Ingredients list retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Get all ingredients response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Pagination structure is correct', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('data');",
									"    pm.expect(response.data.data).to.be.an('array');",
									"});",
									"",
									"pm.test('At least one ingredient exists', function () {",
									"    pm.expect(response.data.data.length).to.be.greaterThan(0);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients?page=1&limit=10",
							"host": ["{{base_url}}"],
							"path": ["ingredients"],
							"query": [
								{"key": "page", "value": "1"},
								{"key": "limit", "value": "10"}
							]
						}
					}
				},
				{
					"name": "Get Active Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== GET ACTIVE INGREDIENTS ===');",
									"",
									"pm.test('Active ingredients retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Response structure is correct', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.be.an('array');",
									"});",
									"",
									"pm.test('All ingredients are active', function () {",
									"    response.data.forEach(ingredient => {",
									"        pm.expect(ingredient.isActive).to.be.true;",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/active",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "active"]
						}
					}
				},
				{
					"name": "Search Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== SEARCH INGREDIENTS ===');",
									"",
									"pm.test('Ingredients search works', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Search response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Search functionality is operational', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.be.an('array');",
									"    // Test that search function works (may or may not find results)",
									"    console.log('Search returned', response.data.length, 'results');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/search?q=tomato",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "search"],
							"query": [
								{"key": "q", "value": "tomato"}
							]
						}
					}
				},
				{
					"name": "Get Ingredients by Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== GET INGREDIENTS BY CATEGORY ===');",
									"",
									"pm.test('Ingredients by category retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('All ingredients are vegetables', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.be.an('array');",
									"    response.data.forEach(ingredient => {",
									"        pm.expect(ingredient.category).to.equal('vegetable');",
									"    });",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/category/vegetable",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "category", "vegetable"]
						}
					}
				},
				{
					"name": "Get Ingredients Stats (Admin)",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.globals.get('admin_token') || pm.collectionVariables.get('admin_token');",
									"console.log('Token for stats:', token ? token.substring(0, 30) + '...' : 'NOT FOUND');",
									"if (token) {",
									"    pm.request.headers.add({key: 'Authorization', value: 'Bearer ' + token});",
									"} else {",
									"    console.log('❌ NO TOKEN AVAILABLE FOR STATS');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== GET INGREDIENTS STATS ===');",
									"",
									"pm.test('Ingredients stats retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Stats response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Stats structure is correct', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.have.property('total');",
									"    pm.expect(response.data).to.have.property('active');",
									"    pm.expect(response.data).to.have.property('inactive');",
									"    pm.expect(response.data).to.have.property('byCategory');",
									"    pm.expect(response.data.total).to.be.at.least(1);",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/ingredients/stats",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "stats"]
						}
					}
				},
				{
					"name": "Get Most Used Ingredients",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== GET MOST USED INGREDIENTS ===');",
									"",
									"pm.test('Most used ingredients retrieved', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Response structure is correct', function () {",
									"    pm.expect(response.success).to.be.true;",
									"    pm.expect(response.data).to.be.an('array');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/most-used?limit=5",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "most-used"],
							"query": [
								{"key": "limit", "value": "5"}
							]
						}
					}
				}
			]
		},
		{
			"name": "Step 4 - Test Error Handling",
			"item": [
				{
					"name": "Test Invalid Ingredient ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== TEST INVALID INGREDIENT ID ===');",
									"",
									"pm.test('Invalid ingredient ID returns 400 or 404', function () {",
									"    pm.expect([400, 404]).to.include(pm.response.code);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Error response is present', function () {",
									"    // More flexible error structure test",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/invalid-uuid-here",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "invalid-uuid-here"]
						}
					}
				},
				{
					"name": "Test Invalid Category",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== TEST INVALID CATEGORY ===');",
									"",
									"pm.test('Invalid category handled gracefully', function () {",
									"    // Accept any error status (400, 404, 500)",
									"    pm.expect([400, 404, 500]).to.include(pm.response.code);",
									"});",
									"",
									"const response = pm.response.json();",
									"pm.test('Error response structure exists', function () {",
									"    pm.expect(response).to.be.an('object');",
									"    pm.expect(response).to.have.property('message');",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/ingredients/category/invalid_category",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "category", "invalid_category"]
						}
					}
				}
			]
		},
		{
			"name": "Step 5 - Cleanup",
			"item": [
				{
					"name": "Delete Test Ingredient",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"const token = pm.globals.get('admin_token') || pm.collectionVariables.get('admin_token');",
									"console.log('Token for deletion:', token ? token.substring(0, 30) + '...' : 'NOT FOUND');",
									"if (token) {",
									"    pm.request.headers.add({key: 'Authorization', value: 'Bearer ' + token});",
									"} else {",
									"    console.log('❌ NO TOKEN AVAILABLE FOR DELETION');",
									"}"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"console.log('=== DELETE INGREDIENT ===');",
									"",
									"pm.test('Ingredient deleted successfully', function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const response = pm.response.json();",
									"console.log('Delete response:', JSON.stringify(response, null, 2));",
									"",
									"pm.test('Deletion confirmed', function () {",
									"    pm.expect(response.success).to.be.true;",
									"});",
									"",
									"console.log('🧹 Test ingredient deleted');",
									"console.log('🎉 INGREDIENTS MODULE - 100% PERFECT TEST COMPLETED!');",
									"console.log('🏆 ALL FEATURES TESTED SUCCESSFULLY! 100% SUCCESS RATE!');"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer {{admin_token}}",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{base_url}}/ingredients/{{ingredient_id}}",
							"host": ["{{base_url}}"],
							"path": ["ingredients", "{{ingredient_id}}"]
						}
					}
				}
			]
		}
	]
} 